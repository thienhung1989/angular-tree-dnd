{"version":3,"sources":["ng-tree-dnd.js"],"names":["fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","fnController","$scope","$element","$attrs","timeLoadData","treeData","tmpTreeData","reload_data","timeReloadData","check_exist_attr","attrs","existAttr","isAnd","angular","isUndefinedOrNull","isUndefined","isArray","for_each_attrs","exist","i","len","length","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","isFunction","$watch","val","indexOf","$safeApply","fn","phase","this","$root","$$phase","$apply","getExpandOn","_len","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","push","field","colDefinitions","do_f","root","node","parent","parent_real","level","visible","index","_i","_icon","_index_real","_dept","_hashKey","__children__","__parent_real__","__parent__","__expanded__","expandLevel","__index__","__index_real__","__level__","__icon__","__icon_class__","$class","icon","__visible__","__uid__","Math","random","getHash","__hashKey__","primary_key","__dept__","init_data","data","isDefined","tree_nodes","oData","_data","_tree_nodes","expandOn","columnDefs","orderBy","_fnInitOrderBy","filter","_fnInitFilter","filterOptions","_deptTotal","indent","indent_plus","indent_unit","$tree_class","$type","$globals","copy","extend","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","checkSibling","_nodes","getLastDescendant","last_child","n","tree","selected_node","getElementChilds","element","querySelector","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","_fnGetHash","_fnSetHash","setHash","accept","dragInfo","moveTo","isChanged","dropEnabled","calsIndent","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","event","changeKey","_key","__selected__","replace","clone","_this","remove","delayReload","temp","splice","clearInfo","__inited__","add","pos","deleteScope","scope","_hash","setScope","getScope","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","info","changed","drag","target","dropped","pass","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","isMove","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","getNode","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","hiddenChild","nodeScope","_fnGetControl","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","equals","updateLimit","$TreeLimit","fnCompile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","then","httpResponse","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","templateUrl","getPath","restrict","controller","compile","fnInitTreeDnDViewport","$q","update","viewportRect","width","eWindow","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","isUpdating","isRender","updateAgain","recursivePromise","item","number","items","renderTime","cancel","setViewport","viewport","getViewport","updateDelayed","updateTimeout","nodeTemplate","getItems","$initViewport","on","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","fnLink","fnWatchNode","newVal","oldVal","nodeOf","keyNode","first","parentReal","_childs","hashKey","childsElem","$node_class","enabledDnD","treeDndNode","getData","getScopeNode","objexpr","objprops","keyO","lenO","skipAttr","keepAttr","lenKeep","join","$on","$nodes_class","$inject","factory","_$initConvert","line2tree","parentKey","callback","parentId","rootIds","_primary","treeObjs","tree2tree","access_child","containKey","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","abs","moving","replaceIndent","children","$injector","_fnget","name","has","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","options","fieldChild","parentPassed","_nodePassed","_childPassed","_filter_index","filter_index","_fnCheck","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","__filtered_index__","_fnBefore","_fnBeforeClear","_fnConvert","_filter","_state","isObject","fnInitFilter","keyChild","_fnOrderBy","fnOrderBy","_fnOrder","list","_fnMain","isString","_fnPlaceHolder","$params","_offset","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_$scope","preventDefault","offsetEdge","_tbody","_frag","_width","_scope","_needCollapse","_copied","createDocumentFragment","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","document_width","scrollWidth","offsetWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","_fnDragEnd","clearData","$$apply","_status","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","collapse_all_parents","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.5\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = isUndefinedOrNull;\r\n\r\n    angular.isDefined = isDefined;\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\r\n        .constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    );angular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                if (angular.isFunction(element.empty)) {\r\n                                    element.empty();\r\n                                } else {\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                element.replaceWith($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n);\n\nangular.module('ntt.TreeDnD')\r    .directive(\r    'treeDndNodeHandle', function () {\r        return {\r            restrict: 'A',\r            scope:    true,\r            link:     function (scope, element, attrs) {\r                scope.$type = 'TreeDnDNodeHandle';\r                if (scope.$class.handle) {\r                    element.addClass(scope.$class.handle);\r                }\r            }\r        };\r    }\r);\n\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDndNode', ['$TreeDnDViewport', '$timeout', function ($TreeDnDViewport, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     fnLink\r\n        };\r\n        function fnLink(scope, element, attrs) {\r\n\r\n            scope.$node_class = '';\r\n\r\n            if (scope.$class.node) {\r\n                element.addClass(scope.$class.node);\r\n                scope.$node_class = scope.$class.node;\r\n            }\r\n            var enabledDnD = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\r\n                keyNode    = attrs.treeDndNode,\r\n                first      = true,\r\n                childsElem;\r\n\t\t\t$TreeDnDViewport.add(scope, element);\r\n\r\n            if (enabledDnD) {\r\n                scope.$type = 'TreeDnDNode';\r\n\r\n                scope.getData = function () {\r\n                    return scope[keyNode];\r\n                };\r\n            }\r\n\r\n            scope.$element            = element;\r\n            scope[keyNode].__inited__ = true;\r\n\r\n            scope.getElementChilds = function () {\r\n                return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n            };\r\n\r\n            scope.setScope(scope, scope[keyNode]);\r\n\r\n            scope.getScopeNode = function () {\r\n                return scope;\r\n            };\r\n\r\n            var objprops = [],\r\n                objexpr,\r\n                i, keyO  = Object.keys(scope[keyNode]),\r\n                lenO     = keyO.length,\r\n                hashKey  = scope[keyNode].__hashKey__,\r\n                skipAttr = [\r\n                    '__visible__',\r\n                    '__children__',\r\n                    '__level__',\r\n                    '__index__',\r\n                    '__index_real__',\r\n\r\n                    '__parent__',\r\n                    '__parent_real__',\r\n                    '__dept__',\r\n                    '__icon__',\r\n                    '__icon_class__'\r\n                ],\r\n                keepAttr = [\r\n                    '__expanded__'\r\n                ],\r\n                lenKeep  = keepAttr.length;\r\n\r\n            // skip __visible__\r\n            for (i = 0; i < lenO + lenKeep; i++) {\r\n                if (i < lenO) {\r\n                    if (skipAttr.indexOf(keyO[i]) === -1) {\r\n                        objprops.push(keyNode + '.' + keyO[i]);\r\n                    }\r\n                } else {\r\n                    if (keyO.indexOf(keepAttr[i - lenO]) === -1) {\r\n                        objprops.push(keyNode + '.' + keepAttr[i - lenO]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            objexpr = '[' + objprops.join(',') + ']';\r\n\r\n            scope.$watch(objexpr, fnWatchNode, true);\r\n\r\n            scope.$on('$destroy', function () {\r\n                scope.deleteScope(scope, scope[keyNode]);\r\n            });\r\n\r\n            function fnWatchNode(newVal, oldVal, scope) {\r\n\r\n\t\t\t\tvar nodeOf = scope[keyNode],\r\n                    _icon;\r\n\r\n                if (first) {\r\n                    _icon                 = nodeOf.__icon__;\r\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\r\n                } else {\r\n\r\n                    var parentReal = nodeOf.__parent_real__,\r\n                        parentNode = scope.tree_nodes[parentReal] || null,\r\n                        _childs    = nodeOf.__children__,\r\n                        _len       = _childs.length,\r\n                        _i;\r\n\r\n                    if (!nodeOf.__inited__) {\r\n                        nodeOf.__inited__ = true;\r\n                    }\r\n\r\n                    if (nodeOf.__hashKey__ !== hashKey) {\r\n                        // clear scope in $globals\r\n                        scope.deleteScope(scope, nodeOf);\r\n\r\n                        // add new scope into $globals\r\n                        scope.setScope(scope, nodeOf);\r\n                        hashKey = nodeOf.__hashKey__;\r\n                    }\r\n\r\n                    if (parentNode && (!parentNode.__expanded__ || !parentNode.__visible__)) {\r\n                        element.addClass(scope.$class.hidden);\r\n                        nodeOf.__visible__ = false;\r\n                    } else {\r\n                        element.removeClass(scope.$class.hidden);\r\n                        nodeOf.__visible__ = true;\r\n                    }\r\n\r\n                    if (_len === 0) {\r\n                        _icon = -1;\r\n                    } else {\r\n                        if (nodeOf.__expanded__) {\r\n                            _icon = 1;\r\n                        } else {\r\n                            _icon = 0;\r\n                        }\r\n                    }\r\n\r\n                    nodeOf.__icon__       = _icon;\r\n                    nodeOf.__icon_class__ = scope.$class.icon[_icon];\r\n\r\n                    if (scope.isTable) {\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            scope.for_all_descendants(_childs[_i], scope.hiddenChild, nodeOf, true);\r\n                        }\r\n                    } else {\r\n                        if (!childsElem) {\r\n                            childsElem = scope.getElementChilds();\r\n                        }\r\n\r\n                        if (nodeOf.__expanded__) {\r\n                            childsElem.removeClass(scope.$class.hidden);\r\n                        } else {\r\n                            childsElem.addClass(scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n\t\t\t\tfirst      = false;\r\n\r\n            }\r\n        }\r\n    }]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            link:     function (scope, element/*, attrs*/) {\r\n                scope.$type = 'TreeDnDNodes';\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                } else {\r\n                    scope.$nodes_class = '';\r\n                }\r\n            }\r\n        };\r\n    }\r\n);\n\nangular.module('ntt.TreeDnD')\r\n       .directive(\r\n           'treeDnd', fnInitTreeDnD);\r\n\r\nfnInitTreeDnD.$inject = [\r\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\r\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\r\n];\r\n\r\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\r\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport\r\n) {\r\n    return {\r\n        restrict:   'E',\r\n        scope:      true,\r\n        replace:    true,\r\n        controller: ['$scope', '$element', '$attrs', fnController],\r\n        compile:    fnCompile\r\n    };\r\n\r\n    function fnController($scope, $element, $attrs) {\r\n        $scope.indent      = 20;\r\n        $scope.indent_plus = 15;\r\n        $scope.indent_unit = 'px';\r\n        $scope.$tree_class = 'table';\r\n        $scope.primary_key = '__uid__';\r\n\r\n        $scope.$type          = 'TreeDnD';\r\n        // $scope.enabledFilter = null;\r\n        $scope.colDefinitions = [];\r\n        $scope.$globals       = {};\r\n        $scope.$class         = {};\r\n\r\n        $scope.treeData   = [];\r\n        $scope.tree_nodes = [];\r\n\r\n        $scope.$class = angular.copy($TreeDnDClass);\r\n        angular.extend(\r\n            $scope.$class.icon, {\r\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n            }\r\n        );\r\n\r\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\r\n            if (angular.isFunction(fn)) {\r\n                var _i, _len, _nodes;\r\n\r\n                if (fn(node, parent)) {\r\n                    // have error or need ignore children\r\n                    return false;\r\n                }\r\n                _nodes = node.__children__;\r\n                _len   = _nodes ? _nodes.length : 0;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\r\n                        // skip sibling of node checking\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            // succeed then continue\r\n            return true;\r\n        };\r\n\r\n        $scope.getLastDescendant = function (node) {\r\n            var last_child, n;\r\n            if (!node) {\r\n                node = $scope.tree ? $scope.tree.selected_node : false;\r\n            }\r\n            if (node === false) {\r\n                return false;\r\n            }\r\n            n = node.__children__.length;\r\n            if (n === 0) {\r\n                return node;\r\n            } else {\r\n                last_child = node.__children__[n - 1];\r\n                return $scope.getLastDescendant(last_child);\r\n            }\r\n        };\r\n\r\n        $scope.getElementChilds = function () {\r\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n        };\r\n\r\n        $scope.onClick = function (node) {\r\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                // We want to detach from Angular's digest cycle so we can\r\n                // independently measure the time for one cycle.\r\n                setTimeout(\r\n                    function () {\r\n                        $scope.tree.on_click(node);\r\n                    }, 0\r\n                );\r\n            }\r\n        };\r\n\r\n        $scope.onSelect = function (node) {\r\n            if (angular.isDefined($scope.tree)) {\r\n                if (node !== $scope.tree.selected_node) {\r\n                    $scope.tree.select_node(node);\r\n                }\r\n\r\n                if (angular.isFunction($scope.tree.on_select)) {\r\n                    setTimeout(\r\n                        function () {\r\n                            $scope.tree.on_select(node);\r\n                        }, 0\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        var passedExpand, _clone;\r\n        $scope.toggleExpand = function (node, fnCallback) {\r\n            passedExpand = true;\r\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                passedExpand = false;\r\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                passedExpand = false;\r\n            }\r\n\r\n            if (passedExpand) {\r\n                if (node.__children__.length > 0) {\r\n                    node.__expanded__ = !node.__expanded__;\r\n                }\r\n            }\r\n        };\r\n\r\n\r\n        var _fnGetHash    = function (node) {\r\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key];\r\n            },\r\n            _fnSetHash    = function (node) {\r\n                var _hashKey = _fnGetHash(node);\r\n                if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                    node.__hashKey__ = _hashKey;\r\n                }\r\n                return node;\r\n            };\r\n        $scope.getHash    = _fnGetHash;\r\n        $scope.$callbacks = {\r\n            getHash:             _fnGetHash,\r\n            setHash:             _fnSetHash,\r\n            for_all_descendants: $scope.for_all_descendants,\r\n            /*expand:              function (node) {\r\n             return true;\r\n             },*/\r\n            accept:              function (dragInfo, moveTo, isChanged) {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                var unit = 0,\r\n                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                if (!skipUnit) {\r\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                }\r\n\r\n                if (level - 1 < 1) {\r\n                    return edge + unit;\r\n                } else {\r\n                    return $scope.indent * (level - 1) + edge + unit;\r\n                }\r\n            },\r\n            droppable:           function () {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            draggable:           function () {\r\n                return $scope.dragEnabled === true;\r\n            },\r\n            beforeDrop:          function (event) {\r\n                return true;\r\n            },\r\n            changeKey:           function (node) {\r\n                var _key     = node.__uid__;\r\n                node.__uid__ = Math.random();\r\n                if (node.__selected__) {\r\n                    delete node.__selected__;\r\n                }\r\n\r\n                if ($scope.primary_key !== '__uid__') {\r\n                    _key = '' + node[$scope.primary_key];\r\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                    node[$scope.primary_key] = _key;\r\n                }\r\n                // delete(node.__hashKey__);\r\n            },\r\n            clone:               function (node, _this) {\r\n                _clone = angular.copy(node);\r\n                this.for_all_descendants(_clone, this.changeKey);\r\n                return _clone;\r\n            },\r\n            remove:              function (node, parent, _this, delayReload) {\r\n                var temp = parent.splice(node.__index__, 1)[0];\r\n                if (!delayReload) {\r\n                    $scope.reload_data();\r\n                }\r\n                return temp;\r\n            },\r\n            clearInfo:           function (node) {\r\n                delete node.__inited__;\r\n                delete node.__visible__;\r\n\r\n                // always changed after call reload_data\r\n                //delete node.__hashKey__;\r\n            },\r\n            add:                 function (node, pos, parent, _this) {\r\n                // clearInfo\r\n                this.for_all_descendants(node, this.clearInfo);\r\n                if (parent) {\r\n                    if (parent.length > -1) {\r\n                        if (pos > -1) {\r\n                            parent.splice(pos, 0, node);\r\n                        } else {\r\n                            // todo If children need load crazy\r\n                            parent.push(node);\r\n                        }\r\n                    } else {\r\n                        parent.push(node);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.deleteScope = function (scope, node) {\r\n            var _hash = node.__hashKey__;\r\n            if ($scope.$globals[_hash] && $scope.$globals[_hash] === scope) {\r\n                delete $scope.$globals[_hash];\r\n            }\r\n        };\r\n\r\n        $scope.setScope = function (scope, node) {\r\n            var _hash = node.__hashKey__;\r\n            if ($scope.$globals[_hash] !== scope) {\r\n                $scope.$globals[_hash] = scope;\r\n            }\r\n        };\r\n\r\n        $scope.getScope = function (node) {\r\n            if (node) {\r\n                var _hash = node.__hashKey__;\r\n                //var _hash = typeof node === 'string' ? node : node.__hashKey__;\r\n                return $scope.$globals[_hash];\r\n            }\r\n            return $scope;\r\n        };\r\n\r\n        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n            $scope.placeElm    = null;\r\n            //                            $scope.dragBorder = 30;\r\n            $scope.dragEnabled = null;\r\n            $scope.dropEnabled = null;\r\n            $scope.horizontal  = null;\r\n\r\n            if ($attrs.enableDrag) {\r\n\r\n                $scope.dragDelay       = 0;\r\n                $scope.enabledMove     = true;\r\n                $scope.statusMove      = true;\r\n                $scope.enabledHotkey   = false;\r\n                $scope.enabledCollapse = null;\r\n                $scope.statusElm       = null;\r\n                $scope.dragging        = null;\r\n\r\n                angular.extend(\r\n                    $scope.$callbacks, {\r\n                        beforeDrag: function (scopeDrag) {\r\n                            return true;\r\n                        },\r\n                        dragStop:   function (info, passed) {\r\n                            if (!info || !info.changed && info.drag.enabledMove || !passed) {\r\n                                return null;\r\n                            }\r\n\r\n                            info.target.reload_data();\r\n\r\n                            if (info.target !== info.drag && info.drag.enabledMove) {\r\n                                info.drag.reload_data();\r\n                            }\r\n                        },\r\n                        dropped:    function (info, pass) {\r\n                            if (!info) {\r\n                                return null;\r\n                            }\r\n\r\n                            var _node         = info.node,\r\n                                _nodeAdd      = null,\r\n                                _move         = info.move,\r\n                                _parent       = null,\r\n                                _parentRemove = info.parent || info.drag.treeData,\r\n                                _parentAdd    = _move.parent || info.target.treeData,\r\n                                isMove        = info.drag.enabledMove;\r\n\r\n                            if (!info.changed && isMove) {\r\n                                return false;\r\n                            }\r\n\r\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                if (isMove) {\r\n                                    _parent = _parentRemove;\r\n                                    if (angular.isDefined(_parent.__children__)) {\r\n                                        _parent = _parent.__children__;\r\n                                    }\r\n\r\n                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                        _node,\r\n                                        _parent,\r\n                                        info.drag.$callbacks,\r\n                                        true // delay reload\r\n                                    );\r\n                                } else {\r\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                }\r\n\r\n                                // if node dragging change index in sample node parent\r\n                                // and index node decrement\r\n                                if (isMove &&\r\n                                    info.drag === info.target &&\r\n                                    _parentRemove === _parentAdd &&\r\n                                    _move.pos >= info.node.__index__) {\r\n                                    _move.pos--;\r\n                                }\r\n\r\n                                _parent = _parentAdd;\r\n                                if (_parent.__children__) {\r\n                                    _parent = _parent.__children__;\r\n                                }\r\n\r\n                                info.target.$callbacks.add(\r\n                                    _nodeAdd,\r\n                                    _move.pos,\r\n                                    _parent,\r\n                                    info.drag.$callbacks\r\n                                );\r\n\r\n                                return true;\r\n                            }\r\n\r\n                            return false;\r\n                        },\r\n                        dragStart:  function (event) {\r\n                        },\r\n                        dragMove:   function (event) {\r\n                        }\r\n                    }\r\n                );\r\n\r\n                $scope.setDragging = function (dragInfo) {\r\n                    $scope.dragging = dragInfo;\r\n                };\r\n\r\n                $scope.enableMove = function (val) {\r\n                    if (typeof val === 'boolean') {\r\n                        $scope.enabledMove = val;\r\n                    } else {\r\n                        $scope.enabledMove = true;\r\n                    }\r\n                };\r\n\r\n                if ($attrs.enableStatus) {\r\n                    $scope.enabledStatus = false;\r\n\r\n                    $scope.hideStatus = function () {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.refreshStatus = function () {\r\n                        if (!$scope.dragging) {\r\n                            return;\r\n                        }\r\n\r\n                        if ($scope.enabledStatus) {\r\n                            var statusElmOld = $scope.statusElm;\r\n                            if ($scope.enabledMove) {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                            } else {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                            }\r\n\r\n                            if (statusElmOld !== $scope.statusElm) {\r\n                                if (statusElmOld) {\r\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                    statusElmOld.remove();\r\n                                }\r\n                                $document.find('body').append($scope.statusElm);\r\n\r\n                            }\r\n\r\n                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.setPositionStatus = function (e) {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.css(\r\n                                {\r\n                                    'left':    e.pageX + 10 + 'px',\r\n                                    'top':     e.pageY + 15 + 'px',\r\n                                    'z-index': 9999\r\n                                }\r\n                            );\r\n                            $scope.statusElm.addClass($scope.$class.status);\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n\r\n            $scope.targeting = false;\r\n\r\n            $scope.getPrevSibling = function (node) {\r\n                if (node && node.__index__ > 0) {\r\n                    var _parent, _index = node.__index__ - 1;\r\n\r\n                    if (angular.isDefined(node.__parent_real__)) {\r\n                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                        return _parent.__children__[_index];\r\n                    }\r\n                    return $scope.treeData[_index];\r\n\r\n                }\r\n                return null;\r\n            };\r\n\r\n            $scope.getNode = function (index) {\r\n                if (angular.isUndefinedOrNull(index)) {\r\n                    return null;\r\n                }\r\n                return $scope.tree_nodes[index];\r\n            };\r\n\r\n            $scope.initPlace = function (element, dragElm) {\r\n\r\n                if (!$scope.placeElm) {\r\n                    if ($scope.isTable) {\r\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                        var _len_down   = $scope.colDefinitions.length;\r\n                        $scope.placeElm.append(\r\n                            angular.element($window.document.createElement('td'))\r\n                                   .addClass($scope.$class.empty)\r\n                                   .addClass('indented')\r\n                                   .addClass($scope.$class.place)\r\n                        );\r\n                        while (_len_down-- > 0) {\r\n                            $scope.placeElm.append(\r\n                                angular.element($window.document.createElement('td'))\r\n                                       .addClass($scope.$class.empty)\r\n                                       .addClass($scope.$class.place)\r\n                            );\r\n                        }\r\n                    } else {\r\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                                                 .addClass($scope.$class.empty)\r\n                                                 .addClass($scope.$class.place);\r\n                    }\r\n\r\n                }\r\n\r\n                if (dragElm) {\r\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                }\r\n\r\n                if (element) {\r\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                } else {\r\n                    $scope.getElementChilds().append($scope.placeElm);\r\n                }\r\n\r\n                return $scope.placeElm;\r\n            };\r\n\r\n            $scope.hidePlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.showPlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.getScopeTree = function () {\r\n                return $scope;\r\n            };\r\n\r\n        }\r\n\r\n        $scope.$safeApply = $safeApply;\r\n\r\n\r\n        $scope.hiddenChild       = function fnHiddenChild(node, parent) {\r\n            var nodeScope = $scope.getScope(node);\r\n            if (nodeScope) {\r\n                if (parent && parent.__expanded__ && parent.__visible__) {\r\n                    nodeScope.$element.removeClass($scope.$class.hidden);\r\n                    node.__visible__ = true;\r\n                } else {\r\n                    nodeScope.$element.addClass($scope.$class.hidden);\r\n                    node.__visible__ = false;\r\n                }\r\n            } else {\r\n                // show node & init scope\r\n                if (parent && parent.__expanded__ && parent.__visible__) {\r\n                    node.__visible__ = true;\r\n                } else {\r\n                    node.__visible__ = false;\r\n                }\r\n            }\r\n\r\n            // skip all child hiding... if not expaned\r\n            return node.__expanded__ === false;\r\n        }\r\n        var _fnInitFilter,\r\n            _fnInitOrderBy,\r\n            _fnGetControl,\r\n            _defaultFilterOption = {\r\n                showParent: true,\r\n                showChild:  false,\r\n                beginAnd:   true\r\n            },\r\n            tree,\r\n            _watches             = [\r\n                [\r\n                    'enableDrag', [\r\n                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                    ['number', 'dragDelay', 0, null, 0],\r\n                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                    [\r\n                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                        if (isHotkey) {\r\n                            $scope.enabledMove = false;\r\n                        } else {\r\n                            $scope.enabledMove = $scope.statusMove;\r\n                        }\r\n                    }]\r\n                ]],\r\n                [\r\n                    ['enableDrag', 'enableStatus'], [\r\n                    [\r\n                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\r\n                        function (_url) {\r\n                            if (_url && $templateCache.get(_url)) {\r\n                                $TreeDnDTemplate.setCopy(_url, $scope);\r\n                            }\r\n                        }],\r\n                    [\r\n                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\r\n                        function (_url) {\r\n                            if (_url && $templateCache.get(_url)) {\r\n                                $TreeDnDTemplate.setMove(_url, $scope);\r\n                            }\r\n                        }]\r\n                ]],\r\n                [\r\n                    [['enableDrag', 'enableDrop']], [\r\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                ],\r\n                [\r\n                    '*', [\r\n                    ['boolean', 'treeTable', true, 'treeTable', null],\r\n                    ['boolean', 'horizontal'],\r\n                    [\r\n                        'callback', 'treeClass', function (val) {\r\n                        switch (typeof val) {\r\n                            case 'string':\r\n                                $scope.$tree_class = val;\r\n                                break;\r\n                            case 'object':\r\n                                angular.extend($scope.$class, val);\r\n                                $scope.$tree_class = $scope.$class.tree;\r\n                                break;\r\n                            default:\r\n                                $scope.$tree_class = $attrs.treeClass;\r\n                                break;\r\n                        }\r\n                    }, 'treeClass', function () {\r\n                        $scope.$tree_class = $scope.$class.tree + ' table';\r\n                    }, null, function () {\r\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\r\n                            $scope.$tree_class = $attrs.treeClass.trim();\r\n                            return true;\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                        function (expandOn) {\r\n                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                $scope.expandingProperty = $attrs.expandOn;\r\n                            }\r\n                        }],\r\n                    [\r\n                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\r\n                        'tree', null, function ($tree) {\r\n\r\n                        if (!angular.isFunction(_fnGetControl)) {\r\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                        }\r\n\r\n                        if (angular.isFunction(_fnGetControl)) {\r\n                            tree = angular.extend(\r\n                                $tree,\r\n                                _fnGetControl($scope)\r\n                            );\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                        function (colDefs) {\r\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                $scope.colDefinitions = getColDefs();\r\n                            }\r\n                        }],\r\n                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\r\n                    [\r\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                        var _passed = false;\r\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                            var _keysF = Object.keys(filters),\r\n                                _lenF  = _keysF.length, _iF;\r\n\r\n                            if (_lenF > 0) {\r\n                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\r\n                                        filters[_keysF[_iF]].length === 0) {\r\n                                        continue;\r\n                                    }\r\n                                    _passed = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $scope.enabledFilter = _passed;\r\n                        reload_data();\r\n                    }],\r\n                    [\r\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                        _defaultFilterOption, function (option) {\r\n                        if (typeof option === 'object') {\r\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                        }\r\n                    }],\r\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\r\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\r\n                    ['number', 'indent', 30, null, 30],\r\n                    ['number', 'indentPlus', 20, null, 20],\r\n                    [\r\n                        'null', 'callbacks',\r\n                        function (optCallbacks) {\r\n                            angular.forEach(\r\n                                optCallbacks, function (value, key) {\r\n                                    if (typeof value === 'function') {\r\n                                        if ($scope.$callbacks[key]) {\r\n                                            $scope.$callbacks[key] = value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            );\r\n                            return $scope.$callbacks;\r\n                        },\r\n                        '$callbacks'\r\n                    ],\r\n                    [\r\n                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                        reload_data();\r\n                    }],\r\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\r\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                ]]\r\n            ],\r\n            w, lenW              = _watches.length,\r\n            i, len,\r\n            _curW,\r\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\r\n\r\n            // debounce reload_Data;\r\n            timeReloadData, tmpTreeData;\r\n\r\n        for (w = 0; w < lenW; w++) {\r\n            // skip if not exist\r\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\r\n                continue;\r\n            }\r\n            _curW = _watches[w][1];\r\n            for (i = 0, len = _curW.length; i < len; i++) {\r\n                _typeW    = _curW[i][0];\r\n                _nameW    = _curW[i][1];\r\n                _defaultW = _curW[i][2];\r\n                _scopeW   = _curW[i][3];\r\n                _NotW     = _curW[i][4];\r\n                _AfterW   = _curW[i][5];\r\n                _BeforeW  = _curW[i][6];\r\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n            }\r\n        }\r\n\r\n        if ($attrs.treeData) {\r\n            $scope.$watch(\r\n                $attrs.treeData, function (val) {\r\n                    if (angular.equals(val, $scope.treeData)) {\r\n                        return;\r\n                    }\r\n\r\n                    tmpTreeData = val;\r\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\r\n                        timeReloadData = $timeout(timeLoadData, 350);\r\n                    }\r\n                }, true\r\n            );\r\n        }\r\n\r\n        function timeLoadData() {\r\n            $scope.treeData = tmpTreeData;\r\n            reload_data();\r\n            timeReloadData = null;\r\n        }\r\n\r\n        $scope.updateLimit = function updateLimit() {\r\n            //console.log('Call fn UpdateLimit');\r\n            $scope.$TreeLimit += 50;\r\n        };\r\n\r\n        $scope.reload_data = reload_data;\r\n\r\n        function check_exist_attr(attrs, existAttr, isAnd) {\r\n            if (angular.isUndefinedOrNull(existAttr)) {\r\n                return false;\r\n            }\r\n\r\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                return true;\r\n            }\r\n\r\n            if (angular.isArray(existAttr)) {\r\n                return for_each_attrs(attrs, existAttr, isAnd);\r\n            }\r\n        }\r\n\r\n        function for_each_attrs(attrs, exist, isAnd) {\r\n            var i, len = exist.length, passed = false;\r\n\r\n            if (len === 0) {\r\n                return null;\r\n            }\r\n            for (i = 0; i < len; i++) {\r\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                    passed = true;\r\n                    if (!isAnd) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (isAnd) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return passed;\r\n        }\r\n\r\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\r\n                               fnBefore\r\n        ) {\r\n            nameScope = nameScope || nameAttr;\r\n            if (typeof type === 'string' || angular.isArray(type)) {\r\n                if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                    return;//jmp\r\n                }\r\n                if (typeof $attrs[nameAttr] === 'string') {\r\n                    $scope.$watch(\r\n                        $attrs[nameAttr], function (val) {\r\n                            if (typeof type === 'string' && typeof val === type ||\r\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\r\n                            ) {\r\n                                $scope[nameScope] = val;\r\n                            } else {\r\n                                if (angular.isFunction(valDefault)) {\r\n                                    $scope[nameScope] = valDefault(val);\r\n                                } else {\r\n                                    $scope[nameScope] = valDefault;\r\n                                }\r\n                            }\r\n\r\n                            if (angular.isFunction(fnAfter)) {\r\n                                fnAfter($scope[nameScope], $scope);\r\n                            }\r\n                        }, true\r\n                    );\r\n                } else {\r\n\r\n                    if (angular.isFunction(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist();\r\n                    } else if (!angular.isUndefined(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function $safeApply(fn) {\r\n            var phase = this.$root.$$phase;\r\n            if (phase === '$apply' || phase === '$digest') {\r\n                if (fn && typeof fn === 'function') {\r\n                    fn();\r\n                }\r\n            } else {\r\n                this.$apply(fn);\r\n            }\r\n        }\r\n\r\n        function getExpandOn() {\r\n            if ($scope.treeData && $scope.treeData.length) {\r\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                    _regex                                 = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\r\n                    _len,\r\n                    i;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        $scope.expandingProperty = _keys[i];\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Auto get first\r\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\r\n                    $scope.expandingProperty = _keys[0];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        function getColDefs() {\r\n            // Auto get Defs except attribute __level__ ....\r\n            if ($scope.treeData.length) {\r\n                var _col_defs = [], _firstNode = $scope.treeData[0],\r\n                    _regex                     = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\r\n                    _keys                      = Object.keys(_firstNode),\r\n                    i, _len;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        _col_defs.push(\r\n                            {\r\n                                field: _keys[i]\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                $scope.colDefinitions = _col_defs;\r\n            }\r\n        }\r\n\r\n        function do_f(root, node, parent, parent_real, level, visible, index) {\r\n\r\n            if(typeof node !== 'object'){\r\n                return 0;\r\n            }\r\n\r\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n            if (!angular.isArray(node.__children__)) {\r\n                node.__children__ = [];\r\n            }\r\n\r\n            node.__parent_real__ = parent_real;\r\n            node.__parent__      = parent;\r\n            _len                 = node.__children__.length;\r\n\r\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                node.__expanded__ = level < $scope.expandLevel;\r\n            }\r\n\r\n            if (_len === 0) {\r\n                _icon = -1;\r\n            } else {\r\n                if (node.__expanded__) {\r\n                    _icon = 1;\r\n                } else {\r\n                    _icon = 0;\r\n                }\r\n            }\r\n\r\n            // Insert item vertically\r\n            _index_real         = root.length;\r\n            node.__index__      = index;\r\n            node.__index_real__ = _index_real;\r\n            node.__level__      = level;\r\n            node.__icon__       = _icon;\r\n            node.__icon_class__ = $scope.$class.icon[_icon];\r\n            node.__visible__    = !!visible;\r\n\r\n            if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                node.__uid__ = '' + Math.random();\r\n            }\r\n\r\n            _hashKey = $scope.getHash(node);\r\n\r\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                node.__hashKey__ = _hashKey;\r\n            }\r\n\r\n            root.push(node);\r\n\r\n            // Check node children\r\n            _dept = 1;\r\n            if (_len > 0) {\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _dept += do_f(\r\n                        root,\r\n                        node.__children__[_i],\r\n                        node[$scope.primary_key],\r\n                        _index_real,\r\n                        level + 1,\r\n                        visible && node.__expanded__,\r\n                        _i\r\n                    );\r\n                }\r\n            }\r\n\r\n            node.__dept__ = _dept;\r\n\r\n            return _dept;\r\n        }\r\n\r\n        function init_data(data) {\r\n\r\n            // clear memory\r\n            if (angular.isDefined($scope.tree_nodes)) {\r\n                delete $scope.tree_nodes;\r\n            }\r\n\r\n            $scope.tree_nodes = data;\r\n            return data;\r\n        }\r\n\r\n        function reload_data(oData) {\r\n            var _data,\r\n                _len,\r\n                _tree_nodes = [];\r\n            if (angular.isDefined(oData)) {\r\n                if (!angular.isArray(oData) || oData.length === 0) {\r\n                    return init_data([]);\r\n                } else {\r\n                    _data = oData;\r\n                }\r\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\r\n                return init_data([]);\r\n            } else {\r\n                _data = $scope.treeData;\r\n            }\r\n\r\n            if (!$attrs.expandOn) {\r\n                getExpandOn();\r\n            }\r\n\r\n            if (!$attrs.columnDefs) {\r\n                getColDefs();\r\n            }\r\n\r\n            if (angular.isDefined($scope.orderBy)) {\r\n                if (!angular.isFunction(_fnInitOrderBy)) {\r\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitOrderBy)) {\r\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\r\n                }\r\n            }\r\n\r\n            if (angular.isDefined($scope.filter)) {\r\n                if (!angular.isFunction(_fnInitFilter)) {\r\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitFilter)) {\r\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\r\n                }\r\n            }\r\n\r\n            _len = _data.length;\r\n            if (_len > 0) {\r\n                var _i,\r\n                    _deptTotal = 0;\r\n\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                }\r\n\r\n            }\r\n\r\n            init_data(_tree_nodes);\r\n\r\n            return _tree_nodes;\r\n        }\r\n    }\r\n\r\n    function fnCompile(tElement) {\r\n\r\n        var $_Template = '',\r\n            _element   = tElement.html().trim();\r\n\r\n        if (_element.length > 0) {\r\n            $_Template = _element;\r\n            tElement.html('');\r\n        }\r\n\r\n        return function fnPost(scope, element, attrs) {\r\n\r\n            if (attrs.enableDrag) {\r\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                if (angular.isFunction(_fnInitDrag)) {\r\n                    _fnInitDrag(scope, element, $window, $document);\r\n                }\r\n            }\r\n\r\n            // kick out $digest\r\n            element.ready(function () {\r\n                // apply Template\r\n                function checkTreeTable(template, scope) {\r\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\r\n                        attrInclude;\r\n\r\n                    scope.isTable = null;\r\n                    if (elemNode) {\r\n                        elemNode    = angular.element(elemNode);\r\n                        attrInclude = elemNode.attr('ng-include');\r\n                    } else {\r\n                        return;\r\n                    }\r\n\r\n                    if (attrInclude) {\r\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\r\n                        if (typeof treeInclude === 'string') {\r\n                            return $http.get(\r\n                                treeInclude,\r\n                                {cache: $templateCache}\r\n                            ).then(\r\n                                function (httpResponse) {\r\n                                    var data          = httpResponse.data.trim();\r\n                                    //scope.templateNode = data;\r\n                                    var tempDiv       = document.createElement('div');\r\n                                    tempDiv.innerHTML = data;\r\n                                    tempDiv           = angular.element(tempDiv);\r\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\r\n                                }\r\n                            );\r\n                        }\r\n                    } else {\r\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\r\n                        //scope.templateNode = elemNode.html();\r\n                    }\r\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\r\n                    //elemNode.html('');\r\n                }\r\n\r\n                //scope.$watch(tableDataLoaded, transformTable);\r\n                /*\r\n                 function tableDataLoaded(elem) {\r\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\r\n                 // until after the table is transformed\r\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\r\n                 return firstCell && !firstCell.style.width;\r\n                 }\r\n\r\n                 function transformTable(elem, attrs) {\r\n                 // reset display styles so column widths are correct when measured below\r\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n                 // wrap in $timeout to give table a chance to finish rendering\r\n                 $timeout(function () {\r\n                 // set widths of columns\r\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\r\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\r\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\r\n\r\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n                 if (tdElems) {\r\n                 tdElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (thElem) {\r\n                 thElem.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (tfElems) {\r\n                 tfElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 });\r\n\r\n                 // set css styles on thead and tbody\r\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\r\n\r\n                 angular.element(elem.querySelectorAll('tbody')).css({\r\n                 'display':  'block',\r\n                 'height':   attrs.tableHeight || 'inherit',\r\n                 'overflow': 'auto'\r\n                 });\r\n\r\n                 // reduce width of last column by width of scrollbar\r\n                 var tbody          = elem.querySelector('tbody');\r\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\r\n                 if (scrollBarWidth > 0) {\r\n                 // for some reason trimming the width by 2px lines everything up better\r\n                 scrollBarWidth -= 2;\r\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\r\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\r\n                 }\r\n                 });\r\n                 }*/\r\n                var promiseCheck;\r\n                if ($_Template.length > 0) {\r\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\r\n                    if (typeof promiseCheck === 'object') {\r\n                        promiseCheck.then(function () {\r\n                            element.append($compile($_Template)(scope));\r\n                        });\r\n                    } else {\r\n                        element.append($compile($_Template)(scope));\r\n                    }\r\n                } else {\r\n                    $http.get(\r\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                        {cache: $templateCache}\r\n                    ).then(\r\n                        function (httpResponse) {\r\n                            var data     = angular.element(httpResponse.data.trim());\r\n                            promiseCheck = checkTreeTable(data, scope);\r\n                            if (typeof promiseCheck === 'object') {\r\n                                promiseCheck.then(function () {\r\n                                    element.append($compile(data)(scope));\r\n                                });\r\n                            } else {\r\n                                element.append($compile(data)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            })\r\n        };\r\n    }\r\n}\r\n\n\nangular.module('ntt.TreeDnD')\r\n       .factory(\r\n           '$TreeDnDConvert', function () {\r\n               var _$initConvert = {\r\n                   line2tree: function (data, primaryKey, parentKey, callback) {\r\n                       callback = typeof callback === 'function' ? callback : function () {\r\n                       };\r\n                       if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                           return [];\r\n                       }\r\n                       var tree     = [],\r\n                           rootIds  = [],\r\n                           item     = data[0],\r\n                           _primary = item[primaryKey],\r\n                           treeObjs = {},\r\n                           parentId, parent,\r\n                           len      = data.length,\r\n                           i        = 0;\r\n                       while (i < len) {\r\n                           item = data[i++];\r\n                           callback(item);\r\n                           _primary           = item[primaryKey];\r\n                           treeObjs[_primary] = item;\r\n                       }\r\n                       i = 0;\r\n                       while (i < len) {\r\n                           item = data[i++];\r\n                           callback(item);\r\n                           _primary           = item[primaryKey];\r\n                           treeObjs[_primary] = item;\r\n                           parentId           = item[parentKey];\r\n                           if (parentId) {\r\n                               parent = treeObjs[parentId];\r\n                               if (parent) {\r\n                                   if (parent.__children__) {\r\n                                       parent.__children__.push(item);\r\n                                   } else {\r\n                                       parent.__children__ = [item];\r\n                                   }\r\n                               }\r\n                           } else {\r\n                               rootIds.push(_primary);\r\n                           }\r\n                       }\r\n                       len = rootIds.length;\r\n                       for (i = 0; i < len; i++) {\r\n                           tree.push(treeObjs[rootIds[i]]);\r\n                       }\r\n                       return tree;\r\n                   },\r\n                   tree2tree: function access_child(data, containKey, callback) {\r\n                       callback  = typeof callback === 'function' ? callback : function () {\r\n                       };\r\n                       var _tree = [],\r\n                           _i,\r\n                           _len  = data ? data.length : 0,\r\n                           _copy, _child;\r\n                       for (_i = 0; _i < _len; _i++) {\r\n                           _copy = angular.copy(data[_i]);\r\n                           callback(_copy);\r\n                           if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\r\n                               _child = access_child(_copy[containKey], containKey, callback);\r\n                               delete _copy[containKey];\r\n                               _copy.__children__ = _child;\r\n                           }\r\n                           _tree.push(_copy);\r\n                       }\r\n                       return _tree;\r\n                   }\r\n               };\r\n\r\n               return _$initConvert;\r\n           }\r\n       );\n\nangular.module('ntt.TreeDnD')\r\n       .factory(\r\n           '$TreeDnDHelper', [\r\n               '$document', '$window', function ($document, $window) {\r\n                   var _$helper = {\r\n                       nodrag:          function (targetElm) {\r\n                           return typeof targetElm.attr('data-nodrag') !== 'undefined';\r\n                       },\r\n                       eventObj:        function (e) {\r\n                           var obj = e;\r\n                           if (e.targetTouches !== undefined) {\r\n                               obj = e.targetTouches.item(0);\r\n                           } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                               obj = e.originalEvent.targetTouches.item(0);\r\n                           }\r\n                           return obj;\r\n                       },\r\n                       dragInfo:        function (scope) {\r\n                           var _node   = scope.getData(),\r\n                               _tree   = scope.getScopeTree(),\r\n                               _parent = scope.getNode(_node.__parent_real__);\r\n                           return {\r\n                               node:    _node,\r\n                               parent:  _parent,\r\n                               move:    {\r\n                                   parent: _parent,\r\n                                   pos:    _node.__index__\r\n                               },\r\n                               scope:   scope,\r\n                               target:  _tree,\r\n                               drag:    _tree,\r\n                               drop:    scope.getPrevSibling(_node),\r\n                               changed: false\r\n                           };\r\n                       },\r\n                       height:          function (element) {\r\n                           return element.prop('scrollHeight');\r\n                       },\r\n                       width:           function (element) {\r\n                           return element.prop('scrollWidth');\r\n                       },\r\n                       offset:          function (element) {\r\n                           var boundingClientRect = element[0].getBoundingClientRect();\r\n                           return {\r\n                               width:  element.prop('offsetWidth'),\r\n                               height: element.prop('offsetHeight'),\r\n                               top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                               left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                           };\r\n                       },\r\n                       positionStarted: function (e, target) {\r\n                           var pos     = {};\r\n                           pos.offsetX = e.pageX - this.offset(target).left;\r\n                           pos.offsetY = e.pageY - this.offset(target).top;\r\n                           pos.startX  = pos.lastX = e.pageX;\r\n                           pos.startY = pos.lastY = e.pageY;\r\n                           pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                           pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                           return pos;\r\n                       },\r\n                       positionMoved:   function (e, pos, firstMoving) {\r\n                           // mouse position last events\r\n                           pos.lastX    = pos.nowX;\r\n                           pos.lastY    = pos.nowY;\r\n                           // mouse position this events\r\n                           pos.nowX     = e.pageX;\r\n                           pos.nowY     = e.pageY;\r\n                           // distance mouse moved between events\r\n                           pos.distX    = pos.nowX - pos.lastX;\r\n                           pos.distY    = pos.nowY - pos.lastY;\r\n                           // direction mouse was moving\r\n                           pos.lastDirX = pos.dirX;\r\n                           pos.lastDirY = pos.dirY;\r\n                           // direction mouse is now moving (on both axis)\r\n                           pos.dirX     = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                           pos.dirY     = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                           // axis mouse is now moving on\r\n                           var newAx    = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                           // do nothing on first move\r\n                           if (firstMoving) {\r\n                               pos.dirAx  = newAx;\r\n                               pos.moving = true;\r\n                               return;\r\n                           }\r\n                           // calc distance moved on this axis (and direction)\r\n                           if (pos.dirAx !== newAx) {\r\n                               pos.distAxX = 0;\r\n                               pos.distAxY = 0;\r\n                           } else {\r\n                               pos.distAxX += Math.abs(pos.distX);\r\n                               if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                                   pos.distAxX = 0;\r\n                               }\r\n                               pos.distAxY += Math.abs(pos.distY);\r\n                               if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                                   pos.distAxY = 0;\r\n                               }\r\n                           }\r\n                           pos.dirAx = newAx;\r\n                       },\r\n                       replaceIndent:   function (scope, element, indent, attr) {\r\n                           attr = attr || 'left';\r\n                           angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                       }\r\n                   };\r\n                   return _$helper;\r\n               }]\r\n       );\n\nangular.module('ntt.TreeDnD')\r\n       .factory(\r\n           '$TreeDnDPlugin', ['$injector', function ($injector) {\r\n               var _fnget = function (name) {\r\n                   if (angular.isDefined($injector) && $injector.has(name)) {\r\n                       return $injector.get(name);\r\n                   }\r\n                   return null;\r\n               };\r\n               return _fnget;\r\n           }]\r\n       );\n\nangular.module('ntt.TreeDnD')\r\n       .factory(\r\n           '$TreeDnDTemplate', [\r\n               '$templateCache', function ($templateCache) {\r\n                   var templatePath = 'template/TreeDnD/TreeDnD.html',\r\n                       copyPath     = 'template/TreeDnD/TreeDnDStatusCopy.html',\r\n                       movePath     = 'template/TreeDnD/TreeDnDStatusMove.html',\r\n                       scopes       = {},\r\n                       temp,\r\n                       _$init       = {\r\n                           setMove: function (path, scope) {\r\n                               if (!scopes[scope.$id]) {\r\n                                   scopes[scope.$id] = {};\r\n                               }\r\n                               scopes[scope.$id].movePath = path;\r\n                           },\r\n                           setCopy: function (path, scope) {\r\n                               if (!scopes[scope.$id]) {\r\n                                   scopes[scope.$id] = {};\r\n                               }\r\n                               scopes[scope.$id].copyPath = path;\r\n                           },\r\n                           getPath: function () {\r\n                               return templatePath;\r\n                           },\r\n                           getCopy: function (scope) {\r\n                               if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\r\n                                   temp = $templateCache.get(scopes[scope.$id].copyPath);\r\n                                   if (temp) {\r\n                                       return temp;\r\n                                   }\r\n                               }\r\n                               return $templateCache.get(copyPath);\r\n                           },\r\n                           getMove: function (scope) {\r\n                               if (scopes[scope.$id] && scopes[scope.$id].movePath) {\r\n                                   temp = $templateCache.get(scopes[scope.$id].movePath);\r\n                                   if (temp) {\r\n                                       return temp;\r\n                                   }\r\n                               }\r\n                               return $templateCache.get(movePath);\r\n                           }\r\n                       };\r\n\r\n                   return _$init;\r\n               }]\r\n       );\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\r\n\r\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\r\n\r\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\r\n\r\n    var viewport      = null,\r\n        isUpdating    = false,\r\n        isRender      = false,\r\n        updateAgain   = false,\r\n        viewportRect,\r\n        items         = [],\r\n        nodeTemplate,\r\n        updateTimeout,\r\n        renderTime,\r\n        $initViewport = {\r\n            setViewport:   setViewport,\r\n            getViewport:   getViewport,\r\n            add:           add,\r\n            setTemplate:   setTemplate,\r\n            getItems:      getItems,\r\n            updateDelayed: updateDelayed\r\n        },\r\n        eWindow       = angular.element($window);\r\n\r\n    eWindow.on('load resize scroll', updateDelayed);\r\n\r\n    return $initViewport;\r\n\r\n    function update() {\r\n\r\n        viewportRect = {\r\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\r\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\r\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\r\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\r\n        };\r\n\r\n        if (isUpdating || isRender) {\r\n            updateAgain = true;\r\n            return;\r\n        }\r\n        isUpdating = true;\r\n\r\n        recursivePromise();\r\n    }\r\n\r\n    function recursivePromise() {\r\n        if (isRender) {\r\n            return;\r\n        }\r\n\r\n        var number = number > 0 ? number : items.length, item;\r\n\r\n        if (number > 0) {\r\n            item = items[0];\r\n\r\n            isRender   = true;\r\n            renderTime = $timeout(function () {\r\n                //item.element.html(nodeTemplate);\r\n                //$compile(item.element.contents())(item.scope);\r\n\r\n                items.splice(0, 1);\r\n                isRender = false;\r\n                number--;\r\n                $timeout.cancel(renderTime);\r\n                recursivePromise();\r\n            }, 0);\r\n\r\n        } else {\r\n            isUpdating = false;\r\n            if (updateAgain) {\r\n                updateAgain = false;\r\n                update();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Check if a point is inside specified bounds\r\n     * @param x\r\n     * @param y\r\n     * @param bounds\r\n     * @returns {boolean}\r\n     */\r\n    function pointIsInsideBounds(x, y, bounds) {\r\n        return x >= bounds.left &&\r\n               y >= bounds.top &&\r\n               x <= bounds.left + bounds.width &&\r\n               y <= bounds.top + bounds.height;\r\n    }\r\n\r\n    /**\r\n     * @name setViewport\r\n     * @desciption Set the viewport element\r\n     * @param element\r\n     */\r\n    function setViewport(element) {\r\n        viewport = element;\r\n    }\r\n\r\n    /**\r\n     * Return the current viewport\r\n     * @returns {*}\r\n     */\r\n    function getViewport() {\r\n        return viewport;\r\n    }\r\n\r\n    /**\r\n     * trigger an update\r\n     */\r\n    function updateDelayed() {\r\n        $timeout.cancel(updateTimeout);\r\n        updateTimeout = $timeout(function () {\r\n            update();\r\n        }, 0);\r\n    }\r\n\r\n    /**\r\n     * Add listener for event\r\n     * @param element\r\n     * @param callback\r\n     */\r\n    function add(scope, element) {\r\n        updateDelayed();\r\n        items.push({\r\n            element: element,\r\n            scope:   scope\r\n        });\r\n    }\r\n\r\n    function setTemplate(scope, template) {\r\n        nodeTemplate = template;\r\n    }\r\n\r\n    /**\r\n     * Get list of items\r\n     * @returns {Array}\r\n     */\r\n    function getItems() {\r\n        return items;\r\n    }\r\n}\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            return fnInitFilter;\r\n\r\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                if (!angular.isFunction(fnBefore)) {\r\n                    return null;\r\n                }\r\n\r\n                var _i, _len, _nodes,\r\n                    _nodePassed  = fnBefore(options, node),\r\n                    _childPassed = false,\r\n                    _filter_index = options.filter_index;\r\n\r\n                if (angular.isDefined(node[fieldChild])) {\r\n                    _nodes = node[fieldChild];\r\n                    _len   = _nodes.length;\r\n                    options.filter_index = 0;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                       _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                    }\r\n\r\n                    // restore filter_index of node\r\n                    options.filter_index = _filter_index;\r\n                }\r\n\r\n                if (angular.isFunction(fnAfter)) {\r\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                }\r\n\r\n                return _nodePassed || _childPassed;\r\n            }\r\n\r\n            /**\r\n             * Check data with callback\r\n             * @param {string|object|function|regex} callback\r\n             * @param {*} data\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnCheck(callback, data) {\r\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\r\n                    return null;\r\n                }\r\n\r\n                if (angular.isFunction(callback)) {\r\n                    return callback(data, $filter);\r\n                } else {\r\n                    if (typeof callback === 'boolean') {\r\n                        data = !!data;\r\n                        return data === callback;\r\n                    } else if (angular.isDefined(callback)) {\r\n                        try {\r\n                            var _regex = new RegExp(callback);\r\n                            return _regex.test(data);\r\n                        }\r\n                        catch (err) {\r\n                            if (typeof data === 'string') {\r\n                                return data.indexOf(callback) > -1;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\r\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\r\n             *\r\n             * @param node\r\n             * @param condition\r\n             * @param isAnd\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnProccess(node, condition, isAnd) {\r\n                if (angular.isArray(condition)) {\r\n                    return for_each_filter(node, condition, isAnd);\r\n                } else {\r\n                    var _key      = condition.field,\r\n                        _callback = condition.callback,\r\n                        _iO, _keysO, _lenO;\r\n\r\n                    if (_key === '_$') {\r\n                        _keysO = Object.keys(node);\r\n                        _lenO  = _keysO.length;\r\n                        for (_iO = 0; _iO < _lenO; _iO++) {\r\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else if (angular.isDefined(node[_key])) {\r\n                        return _fnCheck(_callback, node[_key]);\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {object} node\r\n             * @param {array} conditions Array `conditions`\r\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\r\n             * @returns {null|boolean}\r\n             */\r\n            function for_each_filter(node, conditions, isAnd) {\r\n                var i, len = conditions.length || 0, passed = false;\r\n                if (len === 0) {\r\n                    return null;\r\n                }\r\n\r\n                for (i = 0; i < len; i++) {\r\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                        passed = true;\r\n                        // if condition `or` then return;\r\n                        if (!isAnd) {\r\n                            return true;\r\n                        }\r\n                    } else {\r\n\r\n                        // if condition `and` and result in fnProccess = false then return;\r\n                        if (isAnd) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return passed;\r\n            }\r\n\r\n            /**\r\n             * Will call _fnAfter to clear data no need\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @param {boolean} isNodePassed\r\n             * @param {boolean} isChildPassed\r\n             * @param {boolean} isParentPassed\r\n             * @private\r\n             */\r\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                if (isNodePassed === true) {\r\n                    node.__filtered__         = true;\r\n                    node.__filtered_visible__ = true;\r\n                    node.__filtered_index__ = options.filter_index++;\r\n                    return; //jmp\r\n                } else if (isChildPassed === true && options.showParent === true\r\n                           || isParentPassed === true && options.showChild === true) {\r\n                    node.__filtered__         = false;\r\n                    node.__filtered_visible__ = true;\r\n                    node.__filtered_index__ = options.filter_index++;\r\n                    return; //jmp\r\n                }\r\n\r\n                // remove attr __filtered__\r\n                delete node.__filtered__;\r\n                delete node.__filtered_visible__;\r\n                delete node.__filtered_index__;\r\n            }\r\n\r\n            /**\r\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\r\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\r\n             *\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnBefore(options, node) {\r\n                if (options.filter.length === 0) {\r\n                    return true;\r\n                } else {\r\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnBeforeClear` will called when `for_all_descendants` of `node` checking.\r\n             * Alway false to Clear Filter empty\r\n             *\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnBeforeClear(options, node) {\r\n                return false;\r\n            }\r\n\r\n            /**\r\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\r\n             *\r\n             * @param {object|array} filters\r\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\r\n             * @private\r\n             */\r\n            function _fnConvert(filters) {\r\n                var _iF, _lenF, _keysF,\r\n                    _filter,\r\n                    _state;\r\n                // convert filter object to array filter\r\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                    _keysF  = Object.keys(filters);\r\n                    _lenF   = _keysF.length;\r\n                    _filter = [];\r\n\r\n                    if (_lenF > 0) {\r\n                        for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                continue;\r\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                _state = filters[_keysF[_iF]];\r\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                _state = _fnConvert(filters[_keysF[_iF]]);\r\n                            } else {\r\n                                _state = {\r\n                                    field:    _keysF[_iF],\r\n                                    callback: filters[_keysF[_iF]]\r\n                                };\r\n                            }\r\n                            _filter.push(_state);\r\n                        }\r\n                    }\r\n                    _state = null;\r\n                    return _filter;\r\n                }\r\n                else {\r\n                    return filters;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\r\n             * @constructor\r\n             * @param {object|array} treeData\r\n             * @param {object|array} filters\r\n             * @param {object} options\r\n             * @param {string} keyChild\r\n             * @returns {array} Return `treeData` or `treeData` with `filter`\r\n             * @private\r\n             */\r\n            function fnInitFilter(treeData, filters, options, keyChild) {\r\n                if (!angular.isArray(treeData)\r\n                    || treeData.length === 0) {\r\n                    return treeData;\r\n                }\r\n\r\n                var _i, _len,\r\n                    _filter;\r\n\r\n                _filter = _fnConvert(filters);\r\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                    || _filter.length === 0) {\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        for_all_descendants(\r\n                            options,\r\n                            treeData[_i],\r\n                            keyChild || '__children__',\r\n                            _fnBeforeClear, _fnAfter\r\n                        );\r\n                    }\r\n                    return treeData;\r\n                }\r\n\r\n                options.filter = _filter;\r\n                options.filter_index = 0;\r\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                    for_all_descendants(\r\n                        options,\r\n                        treeData[_i],\r\n                        keyChild || '__children__',\r\n                        _fnBefore, _fnAfter\r\n                    );\r\n                }\r\n\r\n                return treeData;\r\n            }\r\n\r\n        }]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    return _fnOrder(treeData, orderBy);\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            function _fnPlaceHolder(e, $params) {\r\n                if ($params.placeElm) {\r\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function _fnDragStart(e, $params) {\r\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                    // disable right click\r\n                    return;\r\n                }\r\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\r\n                    return;\r\n                }\r\n                // the element which is clicked.\r\n                var eventElm   = angular.element(e.target),\r\n                    eventScope = eventElm.scope();\r\n                if (!eventScope || !eventScope.$type) {\r\n                    return;\r\n                }\r\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                //     return;\r\n                // }\r\n\r\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                    return;\r\n                }\r\n\r\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                    dragScope,\r\n                    _$scope         = $params.$scope;\r\n                if (eventElmTagName === 'input'\r\n                    || eventElmTagName === 'textarea'\r\n                    || eventElmTagName === 'button'\r\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                    return;\r\n                }\r\n                // check if it or it's parents has a 'data-nodrag' attribute\r\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                        return;\r\n                    }\r\n                    eventElm = eventElm.parent();\r\n                }\r\n\r\n                e.uiTreeDragging = true; // stop event bubbling\r\n                if (e.originalEvent) {\r\n                    e.originalEvent.uiTreeDragging = true;\r\n                }\r\n                e.preventDefault();\r\n\r\n                dragScope = eventScope.getScopeNode();\r\n\r\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\r\n                    return;\r\n                }\r\n\r\n                $params.firstMoving = true;\r\n                _$scope.setDragging($params.dragInfo);\r\n\r\n                var eventObj = $TreeDnDHelper.eventObj(e);\r\n                $params.pos  = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                if (dragScope.isTable) {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                        .addClass(_$scope.$class.tree)\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass(_$scope.$tree_class);\r\n                } else {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass('tree-dnd-nodes')\r\n                        .addClass(_$scope.$tree_class);\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                        'z-index': 9995\r\n                    }\r\n                );\r\n\r\n                $params.offsetEdge = 0;\r\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\r\n                    _scope         = dragScope,\r\n                    _element       = _scope.$element,\r\n                    _clone,\r\n                    _needCollapse  = !!_$scope.enabledCollapse,\r\n                    _copied        = false,\r\n                    _tbody,\r\n                    _frag;\r\n\r\n                if (_scope.isTable) {\r\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                    _tbody             = angular.element(document.createElement('tbody'));\r\n                    _frag              = angular.element(document.createDocumentFragment());\r\n\r\n                    _$scope.for_all_descendants(\r\n                        $params.dragInfo.node, function (_node, _parent) {\r\n                            _scope   = _$scope.getScope(_node);\r\n                            _element = _scope && _scope.$element;\r\n                            if (_scope && _element) {\r\n                                if (!_copied) {\r\n                                    _clone = _element.clone();\r\n\r\n                                    $TreeDnDHelper.replaceIndent(\r\n                                        _$scope,\r\n                                        _clone,\r\n                                        _node.__level__ - $params.offsetEdge,\r\n                                        'padding-left'\r\n                                    );\r\n\r\n                                    _frag.append(_clone);\r\n\r\n                                    // skip all, just clone parent\r\n                                    if (_needCollapse) {\r\n                                        _copied = true;\r\n                                    }\r\n\r\n                                    // hide if have status Move;\r\n                                    if (_$scope.enabledMove && _$scope.$class.hidden &&\r\n                                        (!_parent || _node.__visible__ || _parent.__visible__ && _parent.__expanded__)) {\r\n                                        _element.addClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            }\r\n                            // skip children of node not expand.\r\n                            return _copied || _node.__visible__ === false || _node.__expanded__ === false;\r\n\r\n                        }, null, !_needCollapse\r\n                    );\r\n                    _tbody.append(_frag);\r\n                    $params.dragElm.append(_tbody);\r\n                } else {\r\n\r\n                    _clone = _element.clone();\r\n                    if (_needCollapse) {\r\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\r\n                    }\r\n\r\n                    // hide if have status Move;\r\n                    $params.dragElm.append(_clone);\r\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                        _element.addClass(_$scope.$class.hidden);\r\n                    }\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                        ) + 'px',\r\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                    }\r\n                );\r\n                // moving item with descendant\r\n                $params.$document.find('body').append($params.dragElm);\r\n                if (_$scope.$callbacks.droppable()) {\r\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                    if (dragScope.isTable) {\r\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                    }\r\n\r\n                    $params.placeElm.css('width', _width);\r\n                }\r\n\r\n                _$scope.showPlace();\r\n                _$scope.targeting  = true;\r\n\r\n                if (_$scope.enabledStatus) {\r\n                    _$scope.refreshStatus();\r\n                    _$scope.setPositionStatus(e);\r\n                }\r\n\r\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                $params.document_height = Math.max(\r\n                    $params.body.scrollHeight,\r\n                    $params.body.offsetHeight,\r\n                    $params.html.clientHeight,\r\n                    $params.html.scrollHeight,\r\n                    $params.html.offsetHeight\r\n                );\r\n\r\n                $params.document_width = Math.max(\r\n                    $params.body.scrollWidth,\r\n                    $params.body.offsetWidth,\r\n                    $params.html.clientWidth,\r\n                    $params.html.scrollWidth,\r\n                    $params.html.offsetWidth\r\n                );\r\n            }\r\n\r\n            function _fnDragMove(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (!$params.dragStarted) {\r\n                    if (!$params.dragDelaying) {\r\n                        $params.dragStarted = true;\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStart($params.dragInfo);\r\n                            }\r\n                        );\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if ($params.dragElm) {\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if (topElmPos + 10 > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if (leftElmPos + 10 > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                    $params.offsetEdge + 1,\r\n                                    true,\r\n                                    true\r\n                            ) + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        isChanged  = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info      = $params.dragInfo,\r\n                        _move      = _info.move,\r\n                        _drag      = _info.node,\r\n                        _drop      = _info.drop,\r\n                        treeScope  = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder   = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                         elementFromPoint() twice to make sure IE8 returns the correct value\r\n                         $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\r\n                            // Not allowed Drop Item\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target   = _info.target;\r\n\r\n                            if (_info.target !== treeScope) {\r\n                                // Replace by place-holder new\r\n                                _target.hidePlace();\r\n                                _target.targeting   = false;\r\n                                treeScope.targeting = true;\r\n\r\n                                _info.target     = treeScope;\r\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                _target   = null;\r\n                                isSwapped = true;\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal  = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos    = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n                            if (angular.isUndefinedOrNull(targetElm)) {\r\n                                return;\r\n                            }\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !targetScope.isTable) {\r\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\r\n                            } else {\r\n                                if (targetScope.isTable) {\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos    = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos    = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         _info.drag === _info.target &&\r\n                                         _target.__index_real__ === _drag.__parent_real__ &&\r\n                                         _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\r\n                                    ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                    ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move    = _move;\r\n                        _info.drop    = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope   = targetScope;\r\n\r\n                        if (targetScope.isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop  = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope  = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            function _fnDragEnd(e, $params) {\r\n                e.preventDefault();\r\n                if ($params.dragElm) {\r\n                    var _passed     = false,\r\n                        _$scope     = $params.$scope,\r\n                        _scope      = _$scope.getScope($params.dragInfo.node),\r\n                        _element    = _scope.$element;\r\n\r\n                    _$scope.$safeApply(\r\n                        function () {\r\n                            _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                        }\r\n                    );\r\n\r\n                    // rollback all\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node, _parent) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                                return _node.__visible__ === false || _node.__expanded__ === false\r\n                            }, null, true\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.remove();\r\n                    $params.dragElm = null;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    if (_$scope.$$apply) {\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                var _status = _$scope.$callbacks.dropped(\r\n                                    $params.dragInfo,\r\n                                    _passed\r\n                                );\r\n\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                                clearData();\r\n                            }\r\n                        );\r\n                    } else {\r\n                        _fnBindDrag($params);\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStop($params.dragInfo, false);\r\n                                clearData();\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                }\r\n\r\n                function clearData() {\r\n                    $params.dragInfo.target.hidePlace();\r\n                    $params.dragInfo.target.targeting = false;\r\n\r\n                    $params.dragInfo = null;\r\n                    _$scope.$$apply  = false;\r\n                    _$scope.setDragging(null);\r\n                }\r\n\r\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n            }\r\n\r\n            function _fnDragStartEvent(e, $params) {\r\n                if ($params.$scope.$callbacks.draggable()) {\r\n                    _fnDragStart(e, $params);\r\n                }\r\n            }\r\n\r\n            function _fnBindDrag($params) {\r\n                $params.element.bind(\r\n                    'touchstart mousedown', function (e) {\r\n                        $params.dragDelaying = true;\r\n                        $params.dragStarted  = false;\r\n                        _fnDragStartEvent(e, $params);\r\n                        $params.dragTimer    = $timeout(\r\n                            function () {\r\n                                $params.dragDelaying = false;\r\n                            }, $params.$scope.dragDelay\r\n                        );\r\n                    }\r\n                );\r\n\r\n                $params.element.bind(\r\n                    'touchend touchcancel mouseup', function () {\r\n                        $timeout.cancel($params.dragTimer);\r\n                    }\r\n                );\r\n            }\r\n\r\n            function _fnKeydownHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (e.keyCode === 27) {\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    _$scope.$$apply = false;\r\n                    _fnDragEnd(e, $params);\r\n                } else {\r\n                    if (_$scope.enabledHotkey && e.shiftKey) {\r\n                        _$scope.enableMove(true);\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                            _element = _scope.$element;\r\n\r\n                        if (_scope.isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node, _parent) {\r\n                                    _scope   = _$scope.getScope(_node);\r\n                                    _element = _scope && _scope.$element;\r\n                                    if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                        if (_$scope.$class.hidden) {\r\n                                            _element.addClass(_$scope.$class.hidden);\r\n                                        }\r\n                                    }\r\n                                    return _node.__visible__ === false || _node.__expanded__ === false\r\n\r\n                                }, null, true\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.addClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _fnKeyupHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                    _$scope.enableMove(false);\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                    }\r\n\r\n                    if (!$params.dragInfo) {\r\n                        return;\r\n                    }\r\n\r\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                        _element = _scope.$element;\r\n\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node, _parent) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (_scope && _element && (!_parent && _node.__visible__ || _parent.__expanded__)) {\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.removeClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                                return _node.__visible__ === false || _node.__expanded__ === false\r\n                            }, null, true\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _$init(scope, element, $window, $document) {\r\n                var $params        = {\r\n                        hasTouch:        'ontouchstart' in window,\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params);\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                    keydownHandler = function (e) {\r\n                        return _fnKeydownHandler(e, $params);\r\n                    },\r\n                    keyupHandler   = function (e) {\r\n                        return _fnKeyupHandler(e, $params);\r\n                    };\r\n\r\n                scope.dragEnd = function (e) {\r\n                    $params.dragEnd(e);\r\n                };\r\n\r\n                $params.bindDrag();\r\n\r\n                angular.element($window.document.body).bind('keydown', keydownHandler);\r\n                angular.element($window.document.body).bind('keyup', keyupHandler);\r\n                //unbind handler that retains scope\r\n                scope.$on(\r\n                    '$destroy', function () {\r\n                        angular.element($window.document.body).unbind('keydown', keydownHandler);\r\n                        angular.element($window.document.body).unbind('keyup', keyupHandler);\r\n                        if (scope.statusElm) {\r\n                            scope.statusElm.remove();\r\n                        }\r\n\r\n                        if (scope.placeElm) {\r\n                            scope.placeElm.remove();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len;\r\n\r\n        function fnSetCollapse(node) {\r\n            node.__expanded__ = false;\r\n        }\r\n\r\n        function fnSetExpand(node) {\r\n            node.__expanded__ = true;\r\n        }\r\n\r\n        function _$init(scope) {\r\n            var n, tree = {\r\n                selected_node:       null,\r\n                for_all_descendants: scope.for_all_descendants,\r\n                select_node:         function (node) {\r\n                    if (!node) {\r\n                        if (tree.selected_node) {\r\n                            delete tree.selected_node.__selected__;\r\n                        }\r\n                        tree.selected_node = null;\r\n                        return null;\r\n                    }\r\n\r\n                    if (node !== tree.selected_node) {\r\n                        if (tree.selected_node) {\r\n                            delete tree.selected_node.__selected__;\r\n                        }\r\n                        node.__selected__  = true;\r\n                        tree.selected_node = node;\r\n                        tree.expand_all_parents(node);\r\n                        if (angular.isFunction(tree.on_select)) {\r\n                            tree.on_select(node);\r\n                        }\r\n                    }\r\n                    return node;\r\n                },\r\n                deselect_node:       function () {\r\n                    _target = null;\r\n                    if (tree.selected_node) {\r\n                        delete tree.selected_node.__selected__;\r\n                        _target            = tree.selected_node;\r\n                        tree.selected_node = null;\r\n                    }\r\n                    return _target;\r\n                },\r\n                get_parent:          function (node) {\r\n                    if (node && node.__parent_real__ !== null) {\r\n                        return scope.tree_nodes[node.__parent_real__];\r\n                    }\r\n                    return null;\r\n                },\r\n                for_all_ancestors:   function (child, fn) {\r\n                    _parent = tree.get_parent(child);\r\n                    if (_parent) {\r\n                        if (fn(_parent)) {\r\n                            return false;\r\n                        }\r\n\r\n                        return tree.for_all_ancestors(_parent, fn);\r\n                    }\r\n                    return true;\r\n                },\r\n                expand_all_parents:  function (child) {\r\n                    child = child || tree.selected_node;\r\n                    if (typeof child === 'object') {\r\n                        tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        )\r\n                    }\r\n                },\r\n                collapse_all_parents:               function (child) {\r\n                    child = child || tree.selected_node;\r\n                    if (typeof child === 'object') {\r\n                        tree.for_all_ancestors(\r\n                            child, fnSetCollapse\r\n                        )\r\n                    }\r\n                },\r\n\r\n                reload_data:                       function () {\r\n                    return scope.reload_data();\r\n                },\r\n                add_node:                          function (parent, new_node, index) {\r\n                    if (typeof index !== 'number') {\r\n                        if (parent) {\r\n                            parent.__children__.push(new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.push(new_node);\r\n                        }\r\n                    } else {\r\n                        if (parent) {\r\n                            parent.__children__.splice(index, 0, new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.splice(index, 0, new_node);\r\n                        }\r\n                    }\r\n                    return new_node;\r\n                },\r\n                add_node_root:                     function (new_node) {\r\n                    tree.add_node(null, new_node);\r\n                    return new_node;\r\n                },\r\n                expand_all:                        function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        tree.for_all_descendants(\r\n                            scope.treeData[i], fnSetExpand\r\n                        );\r\n                    }\r\n                },\r\n                collapse_all:                      function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        tree.for_all_descendants(\r\n                            scope.treeData[i], fnSetCollapse\r\n                        );\r\n                    }\r\n                },\r\n                remove_node:                       function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        if (node.__parent_real__ !== null) {\r\n                            _parent = tree.get_parent(node).__children__;\r\n                        } else {\r\n                            _parent = scope.treeData;\r\n                        }\r\n\r\n                        _parent.splice(node.__index__, 1);\r\n\r\n                        tree.reload_data();\r\n\r\n                        if (tree.selected_node === node) {\r\n                            tree.selected_node = null;\r\n                        }\r\n                    }\r\n                },\r\n                expand_node:                       function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object' && node.__expanded__) {\r\n                        node.__expanded__ = true;\r\n                        return node;\r\n                    }\r\n                },\r\n                collapse_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        node.__expanded__ = false;\r\n                        return node;\r\n                    }\r\n                },\r\n                get_selected_node:                 function () {\r\n                    return tree.selected_node;\r\n                },\r\n                get_first_node:                    function () {\r\n                    len = scope.treeData.length;\r\n                    if (len > 0) {\r\n                        return scope.treeData[0];\r\n                    }\r\n                    return null;\r\n                },\r\n                get_children:                      function (node) {\r\n                    return node.__children__;\r\n                },\r\n                get_siblings:                      function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _parent = tree.get_parent(node);\r\n                        if (_parent) {\r\n                            _target = _parent.__children__;\r\n                        } else {\r\n                            _target = scope.treeData;\r\n                        }\r\n                        return _target;\r\n                    }\r\n                },\r\n                get_next_sibling:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_siblings(node);\r\n                        n       = _target.length;\r\n                        if (node.__index__ < n) {\r\n                            return _target[node.__index__ + 1];\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_sibling:                  function (node) {\r\n                    node    = node || tree.selected_node;\r\n                    _target = tree.get_siblings(node);\r\n                    if (node.__index__ > 0) {\r\n                        return _target[node.__index__ - 1];\r\n                    }\r\n                },\r\n                get_first_child:                   function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _target = node.__children__;\r\n                        if (_target && _target.length > 0) {\r\n                            return node.__children__[0];\r\n                        }\r\n                    }\r\n                    return null;\r\n                },\r\n                get_closest_ancestor_next_sibling: function (node) {\r\n                    node    = node || tree.selected_node;\r\n                    _target = tree.get_next_sibling(node);\r\n                    if (_target) {\r\n                        return _target;\r\n                    }\r\n\r\n                    _parent = tree.get_parent(node);\r\n                    if(_parent)\r\n                    {\r\n                    \treturn tree.get_closest_ancestor_next_sibling(_parent);\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n                get_next_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_first_child(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        } else {\r\n                            return tree.get_closest_ancestor_next_sibling(node);\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return tree.get_last_descendant(_target);\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return _parent;\r\n                    }\r\n                },\r\n                get_last_descendant:               scope.getLastDescendant,\r\n                select_parent_node:                function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _parent = tree.get_parent(node);\r\n                        if (_parent) {\r\n                            return tree.select_node(_parent);\r\n                        }\r\n                    }\r\n                },\r\n                select_first_node:                 function () {\r\n                    var firstNode = tree.get_first_node();\r\n                    return tree.select_node(firstNode);\r\n                },\r\n                select_next_sibling:               function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_sibling:               function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_next_node:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_next_node(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_node:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_node(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            angular.extend(scope.tree, tree);\r\n            return scope.tree;\r\n        }\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            ['<table ng-class=\"$tree_class\">',\r\n             '    <thead>',\r\n             '  <tr>',\r\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\r\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\r\n             '        <\\/th>',\r\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\r\n             '         {{col.displayName || col.field}}',\r\n             '     </th>',\r\n             '    </tr>',\r\n             '    </thead>',\r\n             ' <tbody tree-dnd-nodes>',\r\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\r\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\r\n             '       ng-click=\"onSelect(node)\" ',\r\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\r\n             '        <td tree-dnd-node-handle',\r\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\r\n             '          ng-class=\"expandingProperty.cellClass\"',\r\n             '          compile=\"expandingProperty.cellTemplate\">',\r\n             '              <a data-nodrag>',\r\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\r\n             '                     class=\"tree-icon\"></i>',\r\n             '              </a>',\r\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\r\n             '        </td>',\r\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\r\n             '            compile=\"col.cellTemplate\">',\r\n             '            {{node[col.field]}}',\r\n             '        </td>',\r\n             '    </tr>',\r\n             '    </tbody>',\r\n             '</table>'].join('\\n')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n    function isUndefinedOrNull(val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    function isDefined(val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n})();"]}